counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
counter <- 0
for(i in rnorm(100)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
N <- 1000000                   #Specify Sample Size
counter <- 0               #reset counter
for(i in rnorm(N)){        #iterate over vector of numbers
if(i <= 1 & i >= -1){    #check where iterated variable falls
counter <- counter + 1 #increase counter if condition is met
}
}
#rnorm(N)
answer <- counter / N      #calculate hit-ratio
answer
N <- 1000000                   #Specify Sample Size
counter <- 0               #reset counter
for(i in rnorm(N)){        #iterate over vector of numbers
if(i <= 1 & i >= -1){    #check where iterated variable falls
counter <- counter + 1 #increase counter if condition is met
}
}
#rnorm(N)
answer <- counter / N * 100      #calculate hit-ratio
answer
N <- 1000000
counter <- 0
for(i in rnorm(N)){
if(i > -1 & i < 1){
counter <- counter + 1
}
}
counter
answer <- counter / N * 100
answer
MyFirstVector <- c(3, 45, 56, 732)
MyFirstVector <- c(3, 45, 56, 732)
MyFirstVector
myfirstvector
myfirstVector
myFirstVector
MyFirstVector
is.numeric(MyFirstVector)
is.integer(MyFirstVector)
is.double(MyFirstVector)
V2 <- c(3L, 12L, 243L, 0L)
is.numeric(V2)
is.integer(V2)
is.double(V2)
v3 <- c("a", "B23", "Hello")
v3
is.character(v3)
is.numeric(v3)
v3 <- c("a", "B23", "Hello", 7)
v3
is.character(v3)
is.numeric(v3)
v3 <- c("a", "B23", "Hello", "7")
v3
is.character(v3)
is.numeric(v3)
v3 <- c("a", "B23", "Hello", 7)
v3
is.character(v3)
is.numeric(v3)
seq(1,15)
1:15
seq(1,15,2)
seq(1,15)
1:15
seq(1,15,2)
z <- seq(1,15,4)
z
rep(3, 50)
d <- rep(3,50)
d
rep("a",5)
y
y <- rep(x,10)
y
x <- c(80,20)
y <- rep(x,10)
y
x <- c(1,123,534,13,4)    #combine
y <- seq(201,250,11)      #sequence
z <- rep("Hi!",3)         #replicate
x <- c(1,123,534,13,4)    #combine
y <- seq(201,250,11)      #sequence
z <- rep("Hi!",3)         #replicate
w <- c("a", "b", "c", "d", "e")
w[1]
w[2}]
w[2]
w[3]
w[-1]
w[-3]
v <- w[-3]
1:3
w[1:3]
w[3:5]
w[c(1,3,5)]
w[c(-2,-4)]
-3:-5
w[-3:-5]
w[1:2]
w[0]
w[100]
w[1]
x + y
x + y[-5]
x + y[-1]
x + y[1]
x * y[1]
x * y
x / y
x / y[1,2,4]
x <- rnorm(5)
x
x <- rnorm(5)
x
print(i)
for(i in x){
print(i)
}
print(x[1])
print(x[2])
print(x[3])
print(x[4])
print(x[5]
print(x[5])
print(x[5])
N <- 100
a <- rnorm(N)
b <- rnorm(N)
#De-Vectorized approach
d <- rep(NA,N)
#Vectorized approach
c <- a * b
d <- rep(NA,N)
for(i in 1:N){
d[i] <- a[i] * b[i]
}
d <- rep(NA,N)
for(i in 1:N){
d[i] <- a[i] * b[i]
}
a <- rnorm(N)
N <- 1000000
a <- rnorm(N)
b <- rnorm(N)
#Vectorized approach
c <- a * b
d <- rep(NA,N)
for(i in 1:N){
d[i] <- a[i] * b[i]
}
N <- 100000000
a <- rnorm(N)
b <- rnorm(N)
#Vectorized approach
c <- a * b
#De-Vectorized approach
d <- rep(NA,N)
for(i in 1:N){
d[i] <- a[i] * b[i]
}
tempdir()
[1] "C:\Users\XYZ~1\AppData\Local\Temp\Rtmp86bEoJ\Rtxt32dcef24de2"
dir.create(tempdir())
#re-create the temp directory by:
tempdir()
#[1] "C:\Users\XYZ~1\AppData\Local\Temp\Rtmp86bEoJ\Rtxt32dcef24de2"
dir.create(tempdir())
?rnorm()
?c()
rnorm(5)
rnorm(5, 10, 8)
rnorm(5, 10, 8)
rnorm(5, 10, 8)
rnorm(n=5, mean=10, sd=8)
rnorm(n=5, sd=8, mean=100)
?rnorm(n=5, sd=8, mean=100)
?seq()
seq(10,20,3)
seq(from=10,to=20,b=3)
seq(from=10,to=20,length.out = 100)
seq(from=10,to=20,along.with = x)
x <- c("a","b","c")
seq(from=10,to=20,along.with = x)
?rep()
rep(5,10)
rep(5:6,10)
rep(5:6,times=10)
rep(5:6,each=10)
rep(x,each=5)
rep(x,times=5)
A <- seq(from=10,to=20,along.with = x)
A
sqrt(A)
B <- sqrt(A)
B
library(ggplot2)
remove.packages("ggplot2", lib="~/R/win-library/3.6")
install.packages("ggplot2")
install.packages("ggplot2")
load("~/Documents/Udacity/Programming for Data Science with R/.RData")
library(shinyalert)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(rlang)
library(chron)
library(scales)
library(hms)
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(shinyalert)
library(DT)
# does confirmed file include recovered? looks to be negative incremental so i think yes
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
first = as.Date("2020-01-22")
# 11 identifiers before daily cumulative data starts
start = 11
end = as.numeric(ncol(time_series))
y <- seq(1,end,1)
for(num in y) if (num <= end - start - 1){
varname <- as.Date(first + num)
time_series <- time_series %>%
mutate(!!paste0(varname) := time_series[,start+num+1] - time_series[,start+num])
}
rm(num)
cols <- c(1:(start+1),(end+1):as.numeric(ncol(time_series)))
#incremental data table
incr <- time_series[,cols]
incr <- incr %>% arrange(incr$Province_State)
#state level
state <- incr[,c(7,(start+1):end)]
names <- c(colnames(state))
names <- names[-1]
state$Province_State <- as.character(as.character(state$Province_State))
state <- state %>% group_by(Province_State) %>%
summarise_at(names,sum)
end_st = as.numeric(ncol(state))
#write to RDS file
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore")
saveRDS(incr,"National.RDS")
saveRDS(state,"State.RDS")
runApp()
runApp()
write.csv(incr,file=paste0("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore",
"National.csv"), row.names = FALSE)
write.csv(state,file=paste0("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore",
"State.csv"), row.names = FALSE)
runApp()
runApp()
write.csv(incr,file=paste0("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore",
"/National.csv"), row.names = FALSE)
write.csv(state,file=paste0("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore",
"/State.csv"), row.names = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinyapps)
install.packages("shinyapps")
library(rsconnect)
devtools::install_github("rstudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
runApp()
runApp()
runApp()
runApp()
