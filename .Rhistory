state <- state %>% #mutate(Rank_Change = Rank1 - Rank2) %>%
mutate(Change :=
round((!!as.name(varname2)) / (!!as.name(varname1)),2)
)
state <- state %>% mutate(Indicator = case_when(
Change < 0 ~ "More recoveries than new cases",
Change >= 0 & Change <= 0.5 ~ "Significant improvement",
Change > 0.5 & Change <= 0.85 ~ "Gradual improvement",
Change > 0.85 & Change <= 1.25 ~ "No change",
Change > 1.25 & Change <= 2 ~ "Deterioration",
Change > 2 ~ "Significant deterioration"
))
View(state)
dat <- state %>% select(State, tail(names(.),4))
View(dat)
dat <- dat %>% arrange(desc(dat[,3]))
dat <- dat[,c(1:3)]
dat2 <- head(dat,15)
dat2 <- dat2 %>% arrange(dat2[,3])
View(dat2)
class(dat[,3])
class(dat$`Last 7 Days`)
dat <- state %>% select(State, tail(names(.),4))
dat <- dat %>% arrange(desc(dat[,3]))
dat <- state %>% select(State, tail(names(.),4))
varname1 <- paste0(7," Days before Last ",
7," Days")
nat <- nat %>%
mutate(!!varname1 := rowSums(nat[,c((end-7*2+1):(end-7))]))
#nat <- nat %>% group_by(State) %>%
#  mutate(State_Rank1 := min_rank(desc(!!as.name(varname1)))) %>%
#  ungroup()
#nat <- nat %>%
#  mutate(Natl_Rank1 := min_rank(desc(!!as.name(varname1))))
varname2 <- paste0("Last ",7," Days")
nat <- nat %>%
mutate(!!varname2 := rowSums(nat[,c((end-7+1):end)]))
nat <- nat %>% #mutate(State_Change = State_Rank1 - State_Rank2) %>%
#mutate(Natl_Change = Natl_Rank1 - Natl_Rank2) %>%
mutate(Change :=
round((!!as.name(varname2)) / (!!as.name(varname1)),2)
)
nat <- nat %>% mutate(Indicator = case_when(
Change < 0 ~ "More recoveries than new cases",
Change >= 0 & Change <= 0.5 ~ "Significant improvement",
Change > 0.5 & Change <= 0.85 ~ "Gradual improvement",
Change > 0.85 & Change <= 1.25 ~ "No change",
Change > 1.25 & Change <= 2 ~ "Deterioration",
Change > 2 ~ "Significant deterioration"
))
dat <- natldata() %>% select(State,County,tail(names(.),4))
dat <- nat %>% select(State,County,tail(names(.),4))
View(nat)
nat <- incr
View(nat)
varname1 <- paste0(7," Days before Last ",
7," Days")
nat <- nat %>%
mutate(!!varname1 := rowSums(nat[,c((end-7*2+1):(end-7))]))
#nat <- nat %>% group_by(State) %>%
#  mutate(State_Rank1 := min_rank(desc(!!as.name(varname1)))) %>%
#  ungroup()
#nat <- nat %>%
#  mutate(Natl_Rank1 := min_rank(desc(!!as.name(varname1))))
varname2 <- paste0("Last ",7," Days")
nat <- nat %>%
mutate(!!varname2 := rowSums(nat[,c((end-7+1):end)]))
nat <- nat %>% #mutate(State_Change = State_Rank1 - State_Rank2) %>%
#mutate(Natl_Change = Natl_Rank1 - Natl_Rank2) %>%
mutate(Change :=
round((!!as.name(varname2)) / (!!as.name(varname1)),2)
)
nat <- nat %>% mutate(Indicator = case_when(
Change < 0 ~ "More recoveries than new cases",
Change >= 0 & Change <= 0.5 ~ "Significant improvement",
Change > 0.5 & Change <= 0.85 ~ "Gradual improvement",
Change > 0.85 & Change <= 1.25 ~ "No change",
Change > 1.25 & Change <= 2 ~ "Deterioration",
Change > 2 ~ "Significant deterioration"
))
dat <- nat %>% select(State,County,tail(names(.),4))
dat <- dat %>% arrange(desc(dat[,4]))
dat <- state %>% select(State, tail(names(.),4))
dat <- dat %>% arrange(desc(dat[,3]))
class(dat$`Last 7 Days`)
head(dat[,3])
dat <- dat[,c(1:3)]
dat <- dat %>% arrange(desc(dat[,3]))
dat <- dat %>% arrange(desc(dat[,2]))
dat <- dat %>% arrange(dat[,2])
View(nat)
dat <- dat %>% arrange(dat[,1])
class(dat)
dat <- nat %>% select(State,County,tail(names(.),4))
class(dat)
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
time_series <- time_series %>%
rename(State = Province_State, County = Admin2, County_State = Combined_Key)
first = as.Date("2020-01-22")
start = 11
end = as.numeric(ncol(time_series))
y <- seq(1,end,1)
for(num in y) if (num <= end - start - 1){
varname <- as.Date(first + num)
time_series <- time_series %>%
mutate(!!paste0(varname) := time_series[,start+num+1] - time_series[,start+num])
}
rm(num)
cols <- c(1:(start+1),(end+1):as.numeric(ncol(time_series)))
#incremental data table
incr <- time_series[,cols]
incr <- incr %>% arrange(incr$State)
#state level
state <- incr[,c(7,(start+1):end)]
names <- c(colnames(state))
names <- names[-1]
state$State <- as.character(as.character(state$State))
state <- state %>% group_by(State) %>%
summarise_at(names,sum)
state$State <- as.factor(as.factor(state$State))
state <- as.data.frame(state)
end_st = as.numeric(ncol(state))
nat <- incr
varname1 <- paste0(7," Days before Last ",
7," Days")
state <- state %>%
mutate(!!varname1 := rowSums(state[,c((end_st-7*2+1):(end_st-7))]))
#state <- state %>% mutate(Rank1 := min_rank(desc(!!as.name(varname1))))
varname2 <- paste0("Last ",7," Days")
state <- state %>%
mutate(!!varname2 := rowSums(state[,c((end_st-7+1):end_st)]))
#state <- state %>% mutate(Rank2 := min_rank(desc(!!as.name(varname2))))
state <- state %>% #mutate(Rank_Change = Rank1 - Rank2) %>%
mutate(Change :=
round((!!as.name(varname2)) / (!!as.name(varname1)),2)
)
state <- state %>% mutate(Indicator = case_when(
Change < 0 ~ "More recoveries than new cases",
Change >= 0 & Change <= 0.5 ~ "Significant improvement",
Change > 0.5 & Change <= 0.85 ~ "Gradual improvement",
Change > 0.85 & Change <= 1.25 ~ "No change",
Change > 1.25 & Change <= 2 ~ "Deterioration",
Change > 2 ~ "Significant deterioration"
))
dat <- state %>% select(State, tail(names(.),4))
dat <- dat %>% arrange(dat[,1])
View(dat)
dat <- dat %>% arrange(dat[,3])
dat <- dat %>% arrange(desc(dat[,3]))
dat <- dat[,c(1:3)]
dat2 <- head(dat,15)
dat2 <- dat2 %>% arrange(dat2[,3])
runApp()
runApp()
# Use csse_covid_19_daily_reports
# for county granularity of data
# cumulative data
# csse_covid_19_time_series
# time_series_covid19_confirmed_US
# has daily cumulative for each county
#admin2 = county for both
library(ggplot2)
library(ggthemes)
library(dplyr)
library(rlang)
library(chron)
library(scales)
library(hms)
# cd COVID-19
# git pull origin master
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
date <- Sys.Date()
# does confirmed file include recovered? looks to be negative incremental so i think yes
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
first = as.Date("2020-01-22")
# 11 identifiers before daily cumulative data starts
start = 11
end = as.numeric(ncol(time_series))
ts <- time_series
y <- seq(1,end,1)
for(num in y) if (num <= end - start - 1){
varname <- as.Date(first + num)
ts <- ts %>% mutate(!!paste0(varname) := ts[,start+num+1] - ts[,start+num])
}
rm(num)
new_end = as.numeric(ncol(ts))
# +1 to include first date where cumulative and incremental is the same
cols1 <- c(1:(start+1))
cols2 <- c((end+1):new_end)
cols <- c(cols1,cols2)
rm(cols1)
rm(cols2)
# summarise at county level
incr <- ts[,cols]
incr <- incr %>% arrange(incr$Province_State)
scols <- c(7,(start+1):end)
state <- incr[,scols]
state <- state %>% arrange(state$Province_State)
names <- c(colnames(state))
names <- names[-1]
state$Province_State <- as.character(as.character(state$Province_State))
#summarise at state level
state2 <- state %>% group_by(Province_State)
state2 <- state2 %>% summarise_at(names,sum)
#last 7 day sums
varname1 <- paste0("7","_Days_before_Past_","7","_Days")
incr <- incr %>% mutate(!!varname1 := rowSums(incr[,c((end-7*2+1):(end-7))]))
incr <- incr %>% group_by(Province_State) %>%
mutate(St_Rank1 := min_rank(desc(!!as.name(varname1)))) %>%
ungroup()
incr <- incr %>% mutate(Natl_Rank1 := min_rank(desc(!!as.name(varname1))))
varname2 <- paste0("Past_","7","_Days")
incr <- incr %>% mutate(!!varname2 := rowSums(incr[,c((end-7+1):end)]))
incr <- incr %>% group_by(Province_State) %>%
mutate(St_Rank2 := min_rank(desc(!!as.name(varname2)))) %>%
ungroup()
incr <- incr %>% mutate(Natl_Rank2 := min_rank(desc(!!as.name(varname2))))
incr <- incr %>% mutate(St_Change = St_Rank1 - St_Rank2) %>%
mutate(Natl_Change = Natl_Rank1 - Natl_Rank2) %>%
mutate(increase = case_when(
(!!as.name(varname2)) > (!!as.name(varname1)) ~ "Yes",
TRUE ~ "No"
))
state_end = as.numeric(ncol(state2))
state2 <- state2 %>%
mutate(!!varname1 := rowSums(state2[,c((state_end-7*2+1):(state_end-7))]))
state2 <- state2 %>% mutate(Rank1 := min_rank(desc(!!as.name(varname1))))
state2 <- state2 %>%
mutate(!!varname2 := rowSums(state2[,c((state_end-7+1):state_end)]))
state2 <- state2 %>% mutate(Rank2 := min_rank(desc(!!as.name(varname2))))
state2 <- state2 %>% mutate(Rank_Change = Rank1 - Rank2) %>%
mutate(increase = case_when(
(!!as.name(varname2)) > (!!as.name(varname1)) ~ "Yes",
TRUE ~ "No"
))
write.csv(incr,file=paste0("C:/Users/juhyu/Downloads/corona_all_incremental_",
date,".csv"), row.names = FALSE)
write.csv(state2,file=paste0("C:/Users/juhyu/Downloads/corona_state_incremental_",
date,".csv"), row.names = FALSE)
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
time_series <- time_series %>%
rename(State = Province_State, County = Admin2, County_State = Combined_Key)
first = as.Date("2020-01-22")
start = 11
end = as.numeric(ncol(time_series))
y <- seq(1,end,1)
for(num in y) if (num <= end - start - 1){
varname <- as.Date(first + num)
time_series <- time_series %>%
mutate(!!paste0(varname) := time_series[,start+num+1] - time_series[,start+num])
}
rm(num)
cols <- c(1:(start+1),(end+1):as.numeric(ncol(time_series)))
#incremental data table
incr <- time_series[,cols]
incr <- incr %>% arrange(incr$State)
View(incr)
all <- incr[,c(8,(start+1):end)]
all <- all %>% rename(Country_Region = Country)
all <- all %>% rename(Country = Country_Region)
all <- incr[,c(8,(start+1):end)]
all <- all %>% rename(Country = Country_Region) %>%
mutate(Country = "USA")
View(all)
class(all$Country)
names_all <- c(colnames(all))
names_all <- names[-1]
names_all <- names_all[-1]
all <- all %>% group_by(Country) %>%
summarise_at(names_all,sum)
class(all)
all <- as.data.frame(all)
class(all)
end_all = as.numeric(ncol(all))
runApp('~/Documents/udacity-git-course/corona-explore')
varname1 <- paste0(7," Days before Last ",
7," Days")
all <- all %>%
mutate(!!varname1 := rowSums(state[,c((end_st-7*2+1):(end_st-7))]))
varname2 <- paste0("Last ",7," Days")
all <- incr[,c(8,(start+1):end)]
all <- all %>% rename(Country = Country_Region) %>%
mutate(Country = "USA")
names_all <- c(colnames(all))
names_all <- names_all[-1]
all <- all %>% group_by(Country) %>%
summarise_at(names_all,sum)
all <- as.data.frame(all)
end_all = as.numeric(ncol(all))
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
time_series <- time_series %>%
rename(State = Province_State, County = Admin2, County_State = Combined_Key)
first = as.Date("2020-01-22")
start = 11
end = as.numeric(ncol(time_series))
y <- seq(1,end,1)
for(num in y) if (num <= end - start - 1){
varname <- as.Date(first + num)
time_series <- time_series %>%
mutate(!!paste0(varname) := time_series[,start+num+1] - time_series[,start+num])
}
rm(num)
#state level
state <- incr[,c(7,(start+1):end)]
#incremental data table
incr <- time_series[,cols]
incr <- incr %>% arrange(incr$State)
#state level
state <- incr[,c(7,(start+1):end)]
cols <- c(1:(start+1),(end+1):as.numeric(ncol(time_series)))
#incremental data table
incr <- time_series[,cols]
incr <- incr %>% arrange(incr$State)
#state level
state <- incr[,c(7,(start+1):end)]
names <- c(colnames(state))
names <- names[-1]
?colnames
date <- c(colnames(incr[,end]))
date <- c(colnames(incr[,end-1]))
date <- c(colnames(incr))
date <- date[,end]
class(end)
date <- date[,c(end)]
date <- date[,c(end:end)]
date <- date[1,c(end:end)]
date <- c(colnames(incr[,c(end)]))
date <- c(colnames(incr[,c(end:end)]))
?names
date <- tail(names(incr),1) #c(colnames(incr[,c(end:end)]))
class(date)
date <- as.date(tail(names(incr),1))
date <- as.Date(tail(names(incr),1))
update <- Sys.Date()
runApp('~/Documents/udacity-git-course/corona-explore')
?p()
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
library(crayon)
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
install.packages("colorout")
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
?green()
cat(blue("Hello", "world!"))
cat(blue("Hello world!"))
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
runApp('~/Documents/udacity-git-course/corona-explore')
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
# does confirmed file include recovered? looks to be negative incremental so i think yes
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore")
write.csv(time_series,file=paste0("time_series_covid19_confirmed_US.csv"),
row.names = FALSE)
runApp()
# does confirmed file include recovered? looks to be negative incremental so i think yes
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
time_series <- read.csv("time_series_covid19_confirmed_US.csv")
setwd("C:/Users/juhyu/OneDrive/Documents/Documents/udacity-git-course/corona-explore")
write.csv(time_series,file=paste0("time_series_covid19_confirmed_US.csv"),
row.names = FALSE)
runApp()
?big.mark
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?number
runApp()
?alignment
?align
?vars
?cols_align
install.packages("gt")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?alignment
??alignment
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
